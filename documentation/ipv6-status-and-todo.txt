Status and to do of EPICS base:

- Channel Access:
   - Cannel name resolution:
     working: using link-local IPv6 addresses or global IPv6 addresses.
     todo: test with a DNS name (AAAA record)
   - beacons:
     Are send out via IPv6 link local addresses if configured
     with EPICS_CAS_AUTO_BEACON_ADDR_LIST=6 (or 46)
     The beacons use an extended message for CA_PROTO_RSRV_IS_UP
   - Revers name resolution
     aToIPAddr does not handle IPv6 (and needs to be replaced)
     Some problems to convert interface index into a name
     (The #%en0" part of the IPv6 address)
     Needs to be investigated (may be not thread-save ?)
   - Channel access via TCP/IPv6
     working
   - Mixed usage of IPv4 and IPv6 in the network:
     In general, this should work out of the box.
     Start the repeater like this:
     `killall caRepeater ; EPICS_CA_AUTO_ADDR_LIST=46 caRepeater`
     For IOCs and clients using IPv4, IPv6 or both see ipv6-howto.txt

- pvAccess:
   It looks as if pvxs will replace pvAccess
   https://github.com/mdavidsaver/pvxs

- Other modules:
  pcas:
    Work ongoing. Added patches so that pcas be compiled against latest base
    Support for IPv6 must be added.

- Linux, MacOs, Windows, vxWorks, RTEMS, BSD
  Testing on Linux and Mac looks good.
  Windows: (Which "Windows" ? Visual Studio ? cygwin (seems obsolete) Mingw
  vxWorks, RTEMS: Testing needed.
  FreeBSD: IPv6 sockets do not receive IPv4 mapped by default:
           https://man.freebsd.org/cgi/man.cgi?query=inet6&sektion=4
           They recommend to open a second socket
           I tried a hot-fix, but that didn't work

- pyepics (with the latest ca library)
  First tests look good ("PYEPICS_LIBCA" is your friend)

- pvapy: to be done
- JCA: needed ? CSS/phoebus is working on IPv6
- EPICS gateways: to be done
-  asyn:
  Prototype working.
  It seems that asyn can support IPv6 independent of EPICS base,
  there is not really any common code.

Other todo (unorderedd)
- Clean up the debug printing
- More code review
- write automated tests


====================
Socket usage IPv4/IPv6
Trying to sumarize which sockets are used in EPICS base
(Just to be clear: socket here means either a TCP or UDP socket)

IOC (server):
ca_client_context.cpp:90 epicsSocket46GetDefaultAddressFamily(), SOCK_DGRAM
                         _sendWakeupMsg() needs a socket, any port number.
                         TODO: check if this could be IPv4 ?

caservertask.c:334       AF_INET DGRAM
                         socket for sending server beacons (IPv4)
                         Also used for NIC introspection

caservertask.c:538       AF_INET6 DGRAM
                         beacons for IPv6. One socket for each interface

caservertask.c:200       epicsSocket46GetDefaultAddressFamily STREAM
                         Listening socket for rsrv.
                         Typically [::]:5064 for IPv6 capable IOCs
                         Otherwise 0.0.0.0:5064 for IPv4 only IOCs
                         Additionally/as an alternative:
                         one for each interface in EPICS_CAS_INTF_ADDR_LIST

caservertask.c:732       AF_INET6 DGRAM
                         Channel access via UDP (search requests?)
                         Typically [::]:5064 for IPv6 capable IOCs


caRepeater:
repeater.cpp:574          (AF_INET DGRAM) 0.0.0.0:5065
repeater.cpp:595          (AF_INET6 DGRAM) [::1]:5065

caget:
ca_client_context.cpp:90  (AF_INET6 DGRAM) '[::]:0
                          (Same wakeupmsg as server)
udpiiu.cpp:177            (AF_INET DGRAM)  this->sock4:
                           search requests via IPv4 0.0.0.0:0
                           send wakeup msg
                           repeater registrations ?
udpiiu.cpp:248            (AF_INET6 DGRAM) this->sock6: [::1]:0
                          repeater registrations via IPv6
udpiiu.cpp:389            (AF_INET6 DGRAM) search requests via IPv6
                          One socket for each IPv6 interface,
                          e.g. '[ff02::1%en0]:5064'
udpiiu.cpp:827            (AF_INET6 DGRAM) check if the repeater is running
                          '[::]:5065'

tcpiiu.cpp:722             (AF_INET6 STREAM)
                           Will be used to connect() after a search response
                           Note: Since the socket is created early (and with
                           AF_INET6) epicsSocket46Connect() is used, which
                           can translate IPv4 into "mapped IPv6"
